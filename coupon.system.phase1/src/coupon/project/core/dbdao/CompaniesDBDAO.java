package coupon.project.core.dbdao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import coupon.project.core.dao.CompaniesDAO;
import coupon.project.core.db.ConnectionPool;
import coupon.project.core.exception.CouponSystemException;
import coupon.project.core.types.Company;

public class CompaniesDBDAO implements CompaniesDAO {

	@Override
	public boolean isCompanyExists(String email, String password) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company where company.email = ? and company.password = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setString(1, email);
			pstmt.setString(2, password);
			try (ResultSet res = pstmt.executeQuery();) {
				return res.next();
			}
		} catch (Exception e) {
			throw new CouponSystemException("Company check failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public int addCompany(Company company) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql2 = "insert into company values(0, ?, ?, ?)";
		try (PreparedStatement stmt = con.prepareStatement(sql2, PreparedStatement.RETURN_GENERATED_KEYS);) {
			if (this.isCompanyExists(company.getEmail(), company.getPassword()) == false) {
				stmt.setString(1, company.getName());
				stmt.setString(2, company.getEmail());
				stmt.setString(3, company.getPassword());
				int res = stmt.executeUpdate();
				try (ResultSet result = stmt.getGeneratedKeys();) {

					result.next();
					int autoGeneratedId = result.getInt(1);
					System.out.println("Company id is: " + autoGeneratedId);
					company.setId(autoGeneratedId);
				}

				return res;
			} else {
				throw new CouponSystemException("Company already exists");
			}
		} catch (Exception e) {
			throw new CouponSystemException("Adding Company failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);

		}
	}

	@Override
	public int updateCompany(Company company) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "update company set name = ?, email = ?, password = ? where id = ?;";
		try (PreparedStatement stmt = con.prepareStatement(sql);) {
			stmt.setString(1, company.getName());
			stmt.setString(2, company.getEmail());
			stmt.setString(3, company.getPassword());
			stmt.setInt(4, company.getId());
			int res = stmt.executeUpdate();
			return res;
		} catch (Exception e) {
			throw new CouponSystemException("update company failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public int deleteCompany(int companyID) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "delete from company where company.id = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyID);
			int result = pstmt.executeUpdate();
			return result;
		} catch (Exception e) {
			throw new CouponSystemException("Delete company failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public List<Company> geAllCompanies() throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company;";
		try (Statement stmt = con.createStatement(); ResultSet res = stmt.executeQuery(sql);) {

			List<Company> companies = new ArrayList<Company>();
			while (res.next()) {
				Company company = this.getCompany(res);
				companies.add(company);
			}
			return companies;
		} catch (Exception e) {
			throw new CouponSystemException("geAllCompanies failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public Company getOneCompany(int companyID) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company where company.id = ?";
		try (PreparedStatement pstmt = con.prepareStatement(sql)) {
			pstmt.setInt(1, companyID);
			try (ResultSet res = pstmt.executeQuery();) {
				if (res.next()) {
					Company company = this.getCompany(res);
					return company;
				} else {
					throw new CouponSystemException("Company does not exists");
				}
			}
		} catch (Exception e) {
			throw new CouponSystemException("getOneCompany failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public boolean isCompanyExistsByID(int id) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company where company.id = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, id);
			try (ResultSet res = pstmt.executeQuery();) {
				return res.next();
			}
		} catch (Exception e) {
			throw new CouponSystemException("Company check failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	/**
	 * used to organize a resultSet to company
	 * 
	 * @param res - to be organized.
	 * @return company
	 * @throws SQLException - if DataBase access is error or resultSet is null.
	 */
	private Company getCompany(ResultSet res) throws SQLException {

		Company company = new Company();
		company.setId(res.getInt(1));
		company.setName(res.getString(2));
		company.setEmail(res.getString(3));
		company.setPassword(res.getString(4));
		return company;
	}

	@Override
	public boolean isCompanyExistsByName(String name) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company where name = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setString(1, name);
			try (ResultSet res = pstmt.executeQuery()) {
				if (res.next()) {
					return true;
				}
				return false;
			}
		} catch (Exception e) {
			throw new CouponSystemException("Company check failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public boolean isCompanyExistsByEmail(String email) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from company where email = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setString(1, email);
			try (ResultSet res = pstmt.executeQuery()) {
				if (res.next()) {

					return true;
				}
				return false;
			}
		} catch (Exception e) {
			throw new CouponSystemException("Company check failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public void deleteAllCompanyCouponsPurchased(int companyID) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		try {
			String sql = "delete from customers_vs_coupons where coupon_id in (select id from coupon where company_id = ?);";
			try (PreparedStatement pstmt = con.prepareStatement(sql)) {
				pstmt.setInt(1, companyID);
				pstmt.executeUpdate();
			}
		} catch (Exception e) {
			throw new CouponSystemException("Delete purchased failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public void deleteAllCompanyCoupons(int companyID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		try {
			String sql1 = "delete from coupon where company_id = ?;";
			try (PreparedStatement pstmt = con.prepareStatement(sql1)) {
				pstmt.setInt(1, companyID);
				pstmt.executeUpdate();
			}
		} catch (Exception e) {
			throw new CouponSystemException("Delete company's coupons failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public int getCompanyId(String email) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select id from company where email = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setString(1, email);
			try (ResultSet res = pstmt.executeQuery();) {
				res.next();
				return res.getInt(1);
			}
		} catch (Exception e) {
			throw new CouponSystemException("get company ID failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}
}
