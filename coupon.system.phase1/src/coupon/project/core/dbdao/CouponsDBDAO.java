package coupon.project.core.dbdao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import coupon.project.core.dao.CouponsDAO;
import coupon.project.core.db.ConnectionPool;
import coupon.project.core.exception.CouponSystemException;
import coupon.project.core.types.Category;
import coupon.project.core.types.Coupon;

public class CouponsDBDAO implements CouponsDAO {

	@Override
	public boolean isCouponExists(int id) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where id = ?";
		try (PreparedStatement pstmt = con.prepareStatement(sql)) {
			pstmt.setInt(1, id);
			try (ResultSet res = pstmt.executeQuery();) {
				return res.next();
			}
		} catch (Exception e) {
			throw new CouponSystemException("Check coupon failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public int addCoupon(Coupon coupon) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = getCouponSqlAdd();
		try (PreparedStatement pstmt = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);) {
			pstmt.setInt(1, coupon.getCompanyID());
			pstmt.setInt(2, coupon.getCategory().ordinal());
			pstmt.setString(3, coupon.getTitle());
			pstmt.setString(4, coupon.getDescription());
			pstmt.setDate(5, Date.valueOf(coupon.getStartDate()));
			pstmt.setDate(6, Date.valueOf(coupon.getEndDate()));
			pstmt.setInt(7, coupon.getAmount());
			pstmt.setDouble(8, coupon.getPrice());
			pstmt.setString(9, coupon.getImage());
			int result = pstmt.executeUpdate();
			try (ResultSet res = pstmt.getGeneratedKeys();) {
				res.next();
				int autoGeneratedId = res.getInt(1);
				if (result == 1) {
					System.out.println("Coupon adding succeed");
					System.out.println("Coupon id is: " + autoGeneratedId);
					return autoGeneratedId;
				} else {
					throw new CouponSystemException("Adding coupon failed");
				}
			}
		} catch (SQLException e) {
			throw new CouponSystemException("Adding coupon failed ", e);

		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public int updateCoupon(Coupon coupon) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = getCouponSqlEdit();
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, coupon.getCompanyID());
			pstmt.setInt(2, coupon.getCategory().ordinal());
			pstmt.setString(3, coupon.getTitle());
			pstmt.setString(4, coupon.getDescription());
			pstmt.setDate(5, Date.valueOf(coupon.getStartDate()));
			pstmt.setDate(6, Date.valueOf(coupon.getEndDate()));
			pstmt.setInt(7, coupon.getAmount());
			pstmt.setDouble(8, coupon.getPrice());
			pstmt.setString(9, coupon.getImage());
			pstmt.setInt(10, coupon.getId());
			int res = pstmt.executeUpdate();
			return res;
		} catch (Exception e) {
			throw new CouponSystemException("Update company failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public int deleteCoupon(int couponID) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "delete from coupon where id = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql)) {
			pstmt.setInt(1, couponID);
			int result = pstmt.executeUpdate();
			return result;
		} catch (Exception e) {
			throw new CouponSystemException("Delete coupon failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public List<Coupon> getAllCoupons() throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon;";
		try (Statement stmt = con.createStatement(); ResultSet res = stmt.executeQuery(sql);) {

			List<Coupon> coupons = new ArrayList<Coupon>();
			while (res.next()) {
				Coupon coupon = getCoupon(res);
				coupons.add(coupon);
			}
//			if (coupons.size() > 0) {
			return coupons;
//			} else {
//				throw new CouponSystemException("No field exists");
//			}
		} catch (Exception e) {
			throw new CouponSystemException("Get coupons failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public Coupon getOneCoupon(int couponID) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where id = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, couponID);
			try (ResultSet res = pstmt.executeQuery();) {

				if (res.next()) {
					Coupon coupon = getCoupon(res);
					return coupon;
				} else {
					throw new CouponSystemException("Coupon does not exists");
				}
			}
		} catch (Exception e) {
			throw new CouponSystemException("select coupon failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public int addCouponPurchase(int customerId, int couponID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "insert into customers_vs_coupons values( ?, ?);";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, customerId);
			pstmt.setInt(2, couponID);
			int res = pstmt.executeUpdate();
			return res;
		} catch (Exception e) {
			throw new CouponSystemException("purchase coupon failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public int deleteCouponPurchase(int customerId, int couponID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "delete from customers_vs_coupons where customer_id = ? and coupon_id = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql)) {
			pstmt.setInt(1, customerId);
			pstmt.setInt(2, couponID);
			int res = pstmt.executeUpdate();
			return res;
		} catch (Exception e) {
			throw new CouponSystemException("Delete coupon failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public boolean isCouponExistsInCompanyByTitle(String title, int companyId) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where title = ? and company_id = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql)) {
			pstmt.setString(1, title);
			pstmt.setInt(2, companyId);
			try (ResultSet res = pstmt.executeQuery();) {
				return res.next();
			}
		} catch (SQLException e) {
			throw new CouponSystemException("coupon's title check failed ", e);
		}
	}

	@Override
	public void deleteAllCouponsPurchases(int couponID) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		try {
			String sql = "delete from customers_vs_coupons where coupon_id = ?;";
			try (PreparedStatement pstmt = con.prepareStatement(sql)) {
				pstmt.setInt(1, couponID);
				pstmt.executeUpdate();
			}
		} catch (Exception e) {
			throw new CouponSystemException("Delete coupons purchases failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public List<Coupon> getAllCouponsByCompany(int companyId) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where company_id = ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyId);
			try (ResultSet res = pstmt.executeQuery();) {
				List<Coupon> coupons = new ArrayList<Coupon>();
				while (res.next()) {
					Coupon coupon = getCoupon(res);
					coupons.add(coupon);
				}
				if (coupons.size() > 0) {
					return coupons;
				} else {
					throw new CouponSystemException("No field exists");
				}
			}
		} catch (Exception e) {
			throw new CouponSystemException("Get coupons failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public List<Coupon> getAllCouponsOfCompanyByCategory(int companyId, int categoryId) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where company_id = ? and category_id = ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyId);
			pstmt.setInt(2, categoryId);
			try (ResultSet res = pstmt.executeQuery();) {
				List<Coupon> coupons = new ArrayList<Coupon>();
				while (res.next()) {
					Coupon coupon = getCoupon(res);
					coupons.add(coupon);
				}
				if (coupons.size() > 0) {
					return coupons;
				} else {
					throw new CouponSystemException("No field exists");
				}
			}
		} catch (Exception e) {
			throw new CouponSystemException("Get coupons failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}

	}

	@Override
	public List<Coupon> getCouponsOfCompanyByMaxPrice(int companyId, double price) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from coupon where company_id = ? and price <= ? ;";
		try (PreparedStatement pstmt = con.prepareStatement(sql);) {
			pstmt.setInt(1, companyId);
			pstmt.setDouble(2, price);
			try (ResultSet res = pstmt.executeQuery();) {
				List<Coupon> coupons = new ArrayList<Coupon>();
				while (res.next()) {
					Coupon coupon = getCoupon(res);
					coupons.add(coupon);
				}
				if (coupons.size() > 0) {
					return coupons;
				} else {
					throw new CouponSystemException("No field exists");
				}
			}
		} catch (Exception e) {
			throw new CouponSystemException("Get coupons failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	@Override
	public boolean isCouponPurchased(int couponId, int customerID) throws CouponSystemException {
		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "select * from customers_vs_coupons where customer_id = ? and coupon_id = ?;";
		try (PreparedStatement pstmt = con.prepareStatement(sql)) {
			pstmt.setInt(1, customerID);
			pstmt.setInt(2, couponId);
			try (ResultSet res = pstmt.executeQuery()) {
				if (res.next()) {
					return true;
				} else {
					return false;
				}
			}
		} catch (Exception e) {
			throw new CouponSystemException("check coupon purchase failed ", e);
		}
	}

	@Override
	public void deleteCouponByExpiryDate(LocalDate date) throws CouponSystemException {

		Connection con = ConnectionPool.getInstance().getConnection();
		String sql = "delete from customers_vs_coupons where coupon_id in(select id from coupon where end_date < CURRENT_DATE);";
//		String sql = "delete from customers_vs_coupons where coupon_id in(select id from coupon where end_date < ?);";
		try (PreparedStatement pstmt = con.prepareStatement(sql)) {
//			pstmt.setDate(5, Date.valueOf(date));
			pstmt.executeUpdate();
			String sql1 = "delete from coupon where end_date < CURRENT_DATE;";
//			String sql1 = "delete from coupon where end_date < ?;";
			try (PreparedStatement pstmt1 = con.prepareStatement(sql1)) {
//				pstmt1.setDate(5, Date.valueOf(date));
				pstmt1.executeUpdate();
				System.out.println("deleted");
			}
		} catch (Exception e) {
			throw new CouponSystemException("delete coupons failed ", e);
		} finally {
			ConnectionPool.getInstance().restoreConnection(con);
		}
	}

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	/**
	 * Get an organized SQL statement.
	 * 
	 * @return String
	 */
	public String getCouponSqlEdit() {
		String sql = "update coupon set company_id = ?, category_id = ?, title = ?, description = ?, start_date = ?, end_date = ?, amount = ?, price = ?, image = ? where id = ?;";
		return sql;

	}

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	/**
	 * Organize a resultSet to a coupon.
	 * 
	 * @param res - to be organized.
	 * @return coupon.
	 * @throws SQLException - if DataBase access is error or resultSet is null.
	 */

	public Coupon getCoupon(ResultSet res) throws NumberFormatException, SQLException {

		Coupon coupon = new Coupon();
		coupon.setId(res.getInt(1));
		coupon.setCompanyID(res.getInt(2));
		coupon.setCategory(Category.values()[res.getInt(3)]);
		coupon.setTitle(res.getString(4));
		coupon.setDescription(res.getString(5));
		coupon.setStartDate(LocalDate.parse(res.getString(6)));
		coupon.setEndDate(LocalDate.parse(res.getString(7)));
		coupon.setAmount(res.getInt(8));
		coupon.setPrice(res.getInt(9));
		coupon.setImage(res.getString(10));
		System.out.println(coupon.toString());
		return coupon;
	}

	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	/**
	 * Get an organized SQL statement.
	 * 
	 * @return String
	 */
	public String getCouponSqlAdd() {
		String sql = "insert into coupon values(0 ,? ,? ,? ,? ,? ,? ,? ,? ,?);";
		return sql;

	}
	// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

}
